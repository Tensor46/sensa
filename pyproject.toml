[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "sensa"
dynamic = ["click", "dependencies", "version"]
description = 'ML Training Library.'
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = "MIT"
keywords = ["ML-Training", "MAE", "VIT", "Lightning"]
authors = [
  { name = "Tensor46", email = "vikas11187@gmail.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Documentation = "https://github.com/Tensor46/sensa#readme"
Issues = "https://github.com/Tensor46/sensa/issues"
Source = "https://github.com/Tensor46/sensa"
Changelog = "https://github.com/Tensor46/sensa/blob/main/CHANGELOG.md"

[project.entry-points.pytest11]
sensa = "sensa"

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "-p no:sensa"
testpaths = ["tests"]



[tool.hatch.build]
sources = ["src"]

[tool.hatch.version]
path = "src/sensa/__init__.py"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
python = "3.12"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-watch",
  "textual-dev",
  "types-peewee"
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
extra-dependencies = ["mypy>=1.0.0", "ruff>=0.1.6"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/sensa tests}"
style = [
  "ruff {args:.}",
  "ruff format {args:.}",
]
fmt = [
  "ruff {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "B",
  "C",
  "DTZ",
  "E",
  "F",
  "I",
  "NPY",
  "Q",
  "PD",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "B027",  # Allow non-abstract empty methods in abstract base classes
  "FBT003",  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "S105", "S106", "S107",  # Ignore checks for possible passwords
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",  # Ignore complexity
  "NPY002",
  "B008",
]
unfixable = []

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["src", "tests"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
ignore-names = ["A", "U", "V", "S", "T"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.coverage.run]
source_pkgs = ["src", "tests"]
branch = true
parallel = true
omit = ["src/sensa/__about__.py"]

[tool.coverage.paths]
sensa = ["src/sensa", "*/sensa/src/sensa"]
tests = ["tests", "*/sensa/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

